#### EasyQC-script to perform study-level and meta-level QC

#### 0. Setup:
DEFINE   --pathOut /var/genetics/proj/within_family/within_family_project/processed/easyqc/estonian_biobank
   --strMissing NA
   --strSeparator WHITESPACE
   --acolIn SNP;chromosome;pos;A1;A2;beta;SE;P;freq;N
   --acolInClasses character;numeric;numeric;character;character;numeric;numeric;numeric;numeric;numeric
   --acolNewName rsID;CHR;POS;EFFECT_ALLELE;OTHER_ALLELE;BETA;SE;PVAL;EAF;N

EASYIN --fileIn /var/genetics/proj/within_family/within_family_project/processed/easyqc/estonian_biobank/eduyears.pop.sumstats
START EASYQC

## Make alleles capitalized
EDITCOL --rcdEditCol toupper(EFFECT_ALLELE) --colEdit EFFECT_ALLELE
EDITCOL --rcdEditCol toupper(OTHER_ALLELE)  --colEdit OTHER_ALLELE


#### 1. Sanity checks:
## Filter out SNPs with missing values
CLEAN --rcdClean !(EFFECT_ALLELE%in%c('A','C','G','T')) --strCleanName numDrop_invalid_EA --blnWriteCleaned 0
CLEAN --rcdClean !(OTHER_ALLELE%in%c('A','C','G','T')) --strCleanName numDrop_invalid_OA --blnWriteCleaned 0
CLEAN --rcdClean is.na(EFFECT_ALLELE)&is.na(OTHER_ALLELE) --strCleanName numDrop_Missing_Alleles --blnWriteCleaned 0
CLEAN --rcdClean is.na(rsID) --strCleanName numDrop_Missing_SNP --blnWriteCleaned 0
CLEAN --rcdClean is.na(PVAL) --strCleanName numDrop_Missing_P --blnWriteCleaned 0
CLEAN --rcdClean is.na(BETA) --strCleanName numDrop_Missing_BETA --blnWriteCleaned 0
CLEAN --rcdClean is.na(SE) --strCleanName numDrop_Missing_SE --blnWriteCleaned 0
CLEAN --rcdClean is.na(EAF) --strCleanName numDrop_Missing_EAF --blnWriteCleaned 0
CLEAN --rcdClean is.na(N) --strCleanName numDrop_Missing_N --blnWriteCleaned 0

## Filter out SNPs with nonsense Pvalues
CLEAN --rcdClean PVAL<0|PVAL>1 --strCleanName numDrop_invalid_PVAL --blnWriteCleaned 0
## Export list of SNPs with Pvalue == 0
CRITERION --rcdCrit PVAL==0 --strCritName SNPs_with_P_equal_0
CLEAN --rcdClean SE<=0|SE==Inf|SE>=10 --strCleanName numDrop_invalid_SE --blnWriteCleaned 0
CLEAN --rcdClean abs(BETA)==Inf --strCleanName numDrop_invalid_BETA --blnWriteCleaned 0
CLEAN --rcdClean EAF<0|EAF>1 --strCleanName numDrop_invalid_EAF --blnWriteCleaned 0
CLEAN --rcdClean N<=0 --strCleanName numDrop_invalid_N --blnWriteCleaned 0
CLEAN  --rcdClean !CHR%in%c(1:22,NA) --strCleanName numDropSNP_ChrXY --blnWriteCleaned 1


#### 2. Prepare files for filtering and apply minimum thresholds:

## Add Z scores
ADDCOL --rcdAddCol BETA/SE --colOut Z

## Exclude monomorphic SNPs:
CLEAN --rcdClean (EAF==0)|(EAF==1) --strCleanName numDrop_Monomorph --blnWriteCleaned 0

## Exclude SNPs with low MAF
CLEAN --rcdClean EAF<0.01 | EAF>1-0.01 --strCleanName numDrop_MAF_001 --blnWriteCleaned 0

## Exclude SNPs with low MAC
ADDCOL --rcdAddCol signif(2*pmin(EAF,1-EAF)*N,4) --colOut MAC
CLEAN --rcdClean MAC<25 --strCleanName numDrop_MAC_25 --blnWriteCleaned 0

## Exclude SNPs with N < 0*Nmax
## Note that by default (minimum) N threshold is set to 0% of maximum N.
CLEAN --rcdClean N<0*max(N) --strCleanName numDrop_Nfilter0 --blnWriteCleaned 0

#### 3. Harmonization of allele coding (I/D)
## Aim: compile uniform allele codes A/C/G/T or I/D from different versions
HARMONIZEALLELES  --colInA1 EFFECT_ALLELE --colInA2 OTHER_ALLELE

#### 4. Harmonization of marker names (compile 'cptid')
CREATECPTID --fileMap /var/genetics/ukb/linner/EA3/EasyQC_HRC/EASYQC.RSMID.MAPFILE.HRC.chr1_22_X.txt
      --colMapMarker rsmid
      --colMapChr chr
      --colMapPos pos
      --colInMarker rsID
      --colInA1 EFFECT_ALLELE
      --colInA2 OTHER_ALLELE
      --colInChr CHR
      --colInPos POS
      --blnUseInMarker 1


#### 5.Filter duplicate SNPs
## Aim: For duplicate SNPs keep only the duplicate with highest N
## Dropped duplicates to be written to *duplicates.txt
CLEANDUPLICATES --colInMarker cptid --strMode removeall --colN N

#### 6. AF Checks
## Merge with file containing AFs for 1kG
MERGE    --colInMarker cptid
   --fileRef /var/genetics/ukb/linner/EA3/EasyQC_HRC/EASYQC.ALLELE_FREQUENCY.MAPFILE.HRC.chr1_22_X.LET.FLIPPED_ALLELE_1000G+UK10K.txt
   --acolIn ChrPosID;a1;a2;freq1
   --acolInClasses character;character;character;numeric
   --strRefSuffix .ref
   --colRefMarker ChrPosID
   --blnWriteNotInRef 1
   --blnInAll 0
   --blnRefAll 0
   
## Create column with expected allele frequency, given imputation ref. sample
ADDCOL --rcdAddCol freq1.ref --colOut EAF.ref

## Adjust alleles to all be on the forward strand and to match the reference sample (happens before AFcheck plot!)
## All mismatches will be removed (e.g. A/T in input, A/C in reference)
ADJUSTALLELES  --colInA1 EFFECT_ALLELE --colInA2 OTHER_ALLELE
      --colInFreq EAF 
--colInBeta BETA
 --colRefA1 a1.ref --colRefA2 a2.ref
      --blnRemoveMismatch 1 --blnWriteMismatch 1
      --blnRemoveInvalid 1 --blnWriteInvalid 1
      --blnMetalUseStrand 1

## Compute difference expected and observed allele frequency
ADDCOL --rcdAddCol abs(EAF-EAF.ref) --colOut DAF

## Compare allele frequencies to those in the reference sample
## blnPlotAll 0 --> only outlying SNPs with |Freq-Freq.ref|>0.2 will be plotted (way less computational time)
AFCHECK --colInFreq EAF --colRefFreq EAF.ref
   --numLimOutlier 0.2 --blnRemoveOutlier 1 --blnPlotAll 0



#### 7. Rearrange columns and Write CLEANED output
GETCOLS --acolOut cptid;CHR;POS;rsID;EFFECT_ALLELE;OTHER_ALLELE;BETA;SE;PVAL;EAF;MAC;N;Z
WRITE --strPrefix CLEANED. --strMissing . --strMode gz

#### 8. Plot Pval(Z) versus reported P
PZPLOT   --colBeta BETA --colSe SE --colPval PVAL

#### 9. QQ plot
QQPLOT   --acolQQPlot PVAL --numPvalOffset 0.05 --strMode subplot


#### 10. Generate GC PLOT
CALCULATE --rcdCalc max(N,na.rm=T) --strCalcName N_max
GC --colPval PVAL --blnSuppressCorrection 1
RPLOT  --rcdRPlotX N_max
--rcdRPlotY Lambda.PVAL.GC
--arcdAdd2Plot abline(h=1,col='orange');abline(h=1.1,col='red')
--strAxes lim(0,NULL,0,NULL)
--strPlotName GC-PLOT


STOP EASYQC
